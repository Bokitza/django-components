import glob
from pathlib import Path
from typing import Any, Callable, List, NamedTuple, Optional

from django.template.engine import Engine

from django_components import types as t
from django_components.template_loader import Loader


class SearchResult(NamedTuple):
    searched_dirs: List[Path]
    matched_files: List[Path]


def search(search_glob: Optional[str] = None, engine: Optional[Engine] = None) -> SearchResult:
    """
    Search for directories that may contain components.

    If `search_glob` is given, the directories are searched for said glob pattern,
    and glob search results are returned as a flattened list.
    """
    current_engine = engine
    if current_engine is None:
        current_engine = Engine.get_default()

    loader = Loader(current_engine)
    dirs = loader.get_dirs()

    if search_glob is None:
        return SearchResult(searched_dirs=dirs, matched_files=[])

    component_filenames: List[Path] = []
    for directory in dirs:
        for path in glob.iglob(str(Path(directory) / search_glob), recursive=True):
            component_filenames.append(Path(path))

    return SearchResult(searched_dirs=dirs, matched_files=component_filenames)


# Global counter to ensure that all IDs generated by `gen_id` WILL be unique
_id = 0


def gen_id(length: int = 5) -> str:
    """Generate a unique ID that can be associated with a Node"""
    # Global counter to avoid conflicts
    global _id
    _id += 1

    # Pad the ID with `0`s up to 4 digits, e.g. `0007`
    return f"{_id:04}"


def find_last_index(lst: List, predicate: Callable[[Any], bool]) -> Any:
    for r_idx, elem in enumerate(reversed(lst)):
        if predicate(elem):
            return len(lst) - 1 - r_idx
    return -1


def jsx2django_components(jsx: t.django_html):
    html = jsx
    more_components = True

    while more_components:
        tag = ""
        try:
            tag = jsx.split("<")[1].split("/>")[0]
        except:
            more_components = False
            continue
        if not tag:
            more_components = False
            continue

        is_compoment = not str(tag)[0].isupper()
        if is_compoment:
            jsx = jsx.split(tag)[1]
            continue
        component_name, attributes = tag.split(" ", 1)

        parsed_component = "{% component '" + component_name + "' " + attributes + "%} {% endcomponent %}"

        html = html.replace("<" + tag + "/>", parsed_component)
        jsx = jsx.split(tag)[1]
    return html
